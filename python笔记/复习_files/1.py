#doding:utf-8
list_1=[1,2,6,'fhkd','lfkgp']
list_1.append([1,2,3])
print list_1
#执行结果 [1, 2, 6, 'fhkd', 'lfkgp', [1, 2, 3]]。append是什么类型的数据都作为完整的对象追加到最后，添加对象保留原有的形式
list_1.extend([1,2,'hello',3])
print list_1
#执行结果 [1, 2, 6, 'fhkd', 'lfkgp', 1, 2, 'hello', 3]extend 扩展可迭代对象，把可迭代对象融入到当前的列表中，放在最后
# pop：根据索引取出对应的数据，取出之后，会列表中的数据移除，（不写索引的话，直接默认取出并删除列表最后一个数据)
#字符串也有索引，可以用字符串的切片查询字符串的某段字符，注意顾头不顾尾（索引）
# 字符串内的内置函数 count(c参数1,2,3)函数，查找字符串的某些字符在字符串中出现的次数
# 1.要查询子字符串的内容
# 2.查询范围的开始位置
# 3.查询范围的结束位置
# 注：范围默认情况为查询整个字符串内容
#find()函数，index（函数），都是查字符串中子串在字符串中第一次出现的首字母的索引位置，find()函数找不到会返回-1，而index()会报错
#元组中也有index（函数，它是查询元组中的数据在元组中的索引
#列表中也有count函数，查询列表中某个数据出现的次数，(count：计数，统计某个值在列表中出现的次数)
#字典中常用的函数
# clear(...)  清除字典中所有数据

# copy(...)  拷贝一个该字典并返回一个新的字典，新的字典中拥有原字典的所有内容

# get(...)     根据某个key查询对应的值

# has_key(...)  判断字典用是否拥有某个key

# items(...)  以列表嵌套元组的形式返回字典中所有的key和value

# keys(...)   获取字典中所有的key，并以列表形式返回

# pop(...)    根据某个key取出对应的值，并且从字典中移除。
# 列表中也有pop函数，根据索引取出某个数据，并从列表中移除该数据，参数索引不写，默认取出列表的最后一个数据，并做移操作

# popitem(...)  随机移除字典中的某个数据

# setdefault(...) 设置某个键的默认值，默认值为None

# update(...)  把其他字典中的内容更新到该字典中

# values(...)  获取字典中所有的值，并以列表形式返回
# 列表解析
# 表达式书写格式
# [最终添加到列表中的对象  要进行迭代的语句]
# 表达式版
# [最终添加到列表中的对象(可以是一个表达式) 迭代表达式 判断表达式]
# map（1.某个函数，2.可迭代的对象）函数
# 1.某个函数
# 2.可迭代的对象
# 将可迭代对象中的每一个数据都执行一遍函数,并且以列表的形式返回
# filter条件筛选器：返回符合判断条件的数据，如果函数为空，返回所有为真的数据，如果序列是元组或字符串，返回相同的类型，否则返回一个列表。
ret_list = filter(lambda s:s if s!='l' else None ,string_1)
# 集合的创建，格式：set_1=set([])
#，集合的添加：add 添加要添加的数据看做一个整体
# update 更新 把要添加的数据拆分进行添加 
# & |-，集合的交集，合集，补集
# 全局变量，在整个文件中的任意函数内都可以使用,要想在函数内使用，修改全局变量，必须声明 global 全局变量名
#类中修改对象属性的函数
# setattr （ 1.要修改、添加的对象
# 2.要修改、添加的属性名称
#3.要修改、添加的属性内容）
# 删除属性函数，要删除的属性一定要存在
#delattr(1.要删除的对象名称,2.要删除的对象的属性名称)
# 查询某个对象的某个属性值
# 要查询的对象必须拥有查询的属性
# getattr(1.要查询的对象名称,要查询的属性名称)，对象名称不用引号，属性名称还有内容都带引号，像字符串一样，对象的增删改查都可以用.语法来完成

